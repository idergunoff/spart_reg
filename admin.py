from config import *

@dp.message_handler(commands=['admin'])
@logger.catch
async def admin(msg: types.Message):
    admin = session.query(Admin).filter(Admin.admin_id == msg.from_user.id).first()
    if not admin:
        new_admin = Admin( admin_id=msg.from_user.id, username=msg.from_user.username, confirm=False)
        session.add(new_admin)
        session.commit()
    else:
        if admin.confirm:
            mes = '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–∞–≤a –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
        else:
            mes = '–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞–ø—Ä–æ—Å'
        await bot.send_message(msg.from_user.id, mes)
        return
    kb_confirm_admin = InlineKeyboardMarkup(row_width=2)
    btn_yes = InlineKeyboardButton('–î–∞', callback_data=cb_confirm_admin.new(admin_id=msg.from_user.id, confirm='Yes'))
    btn_no = InlineKeyboardButton('–ù–µ—Ç', callback_data=cb_confirm_admin.new(admin_id=msg.from_user.id, confirm='No'))
    kb_confirm_admin.add(btn_yes, btn_no)
    for i in super_admin:
        await bot.send_message(i, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>"{msg.from_user.username}"</b> –ø–æ–¥–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ '
                                  f'–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞?', reply_markup=kb_confirm_admin)
    mes = '–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
    await bot.send_message(msg.from_user.id, mes)
    logger.info(f'USER "{msg.from_user.id}" COMMAND ADMIN')


@dp.callback_query_handler(cb_confirm_admin.filter())
@logger.catch
async def confirm_admin(call: types.CallbackQuery, callback_data: dict):
    admin = session.query(Admin).filter(Admin.admin_id == callback_data['admin_id']).first()
    if not admin:
        return
    if callback_data['confirm'] == 'Yes':
        session.query(Admin).filter(Admin.admin_id == admin.admin_id).update({Admin.confirm: True}, synchronize_session='fetch')
        session.commit()
        mes = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>"{admin.username}"</b> –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
        await bot.send_message(call.from_user.id, mes)
        await bot.send_message(admin.admin_id, '–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –î–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /tab')
        logger.info(f'USER "{call.from_user.id}" COMMAND CONFIRM ADMIN')
    else:
        mes = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>"{admin.username}"</b>–æ—Ç–∫–∞–∑–∞–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
        await bot.send_message(call.from_user.id, mes)
        await bot.send_message(admin.admin_id, '–í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
    await call.answer()


@dp.message_handler(commands=['tab'])
@logger.catch
async def tab(msg: types.Message):
    admin = session.query(Admin).filter(Admin.admin_id == msg.from_user.id, Admin.confirm == True).first()
    if admin or msg.from_user.id in super_admin:
        kb_tab = InlineKeyboardMarkup(row_width=1)
        bv_count = session.query(BeachVolleyball).count()
        btn_bv_tab = InlineKeyboardButton(f'üì•–ü–ª—è–∂–Ω—ã–π –≤–æ–ª–µ–π–±–æ–ªüèêüèñÔ∏è ({bv_count})', callback_data='bv_tab')
        sb_count = session.query(Streetball).count()
        btn_sb_tab = InlineKeyboardButton(f'üì•–°—Ç—Ä–∏—Ç–±–æ–ªüèÄüèôÔ∏è ({sb_count})', callback_data='sb_tab')
        wo_count = session.query(Workout).count()
        btn_wo_tab = InlineKeyboardButton(f'üì•–í–æ—Ä–∫–∞—É—Çüí™üèã ({wo_count})', callback_data='wo_tab')
        wb_count = session.query(Wakeboarding).count()
        btn_wb_tab = InlineKeyboardButton(f'üì•–í–µ–π–∫–±–æ—Ä–¥–∏–Ω–≥üèÑ‚Äç‚ôÇÔ∏èüåä ({wb_count})', callback_data='wb_tab')
        rc_count = session.query(RockClimbing).count()
        btn_rc_tab = InlineKeyboardButton(f'üì•–°–∫–∞–ª–æ–ª–∞–∑–∞–Ω–∏–µüßó‚Äç‚ôÇÔ∏èüèîÔ∏è ({rc_count})', callback_data='rc_tab')
        fcr_count = session.query(FamilyCatamaranRacing).count()
        btn_fcr_tab = InlineKeyboardButton(f'üì•–°–µ–º–µ–π–Ω—ã–µ –≥–æ–Ω–∫–∏ –Ω–∞ –∫–∞—Ç–∞–º–∞—Ä–∞–Ω–∞—Ö‚õµüë©‚Äç‚ù§Ô∏è‚Äçüë® ({fcr_count})', callback_data='fcr_tab')
        ccw_count = session.query(ChildrenClimbingWall).count()
        btn_ccw_tab = InlineKeyboardButton(f'üì•–î–µ—Ç—Å–∫–∏–π —Å–∫–∞–ª–æ–¥—Ä–æ–ºüë∂üßó‚Äç‚ôÇÔ∏è ({ccw_count})', callback_data='ccw_tab')
        chess_count = session.query(Chess).count()
        btn_chess_tab = InlineKeyboardButton(f'üì•–®–∞—Ö–º–∞—Ç—ã‚ôü‚ôï ({chess_count})', callback_data='chess_tab')
        ff_count = session.query(FigitalFootball).count()
        btn_ff_tab = InlineKeyboardButton(f'üì•–§–∏–¥–∂–∏—Ç–∞–ª-—Ñ—É—Ç–±–æ–ªüéÆ‚öΩ ({ff_count})', callback_data='ff_tab')
        ss_count = session.query(SupSurfing).count()
        btn_ss_tab = InlineKeyboardButton(f'üì•SUP —Å–µ—Ä—Ñ–∏–Ω–≥üèÑ‚Äç‚ôÇÔ∏èüèÑ‚Äç‚ôÄÔ∏èÔ∏è ({ss_count})', callback_data='ss_tab')
        kb_tab.add(btn_bv_tab, btn_sb_tab, btn_wo_tab, btn_wb_tab, btn_rc_tab, btn_fcr_tab, btn_ccw_tab, btn_chess_tab, btn_ff_tab, btn_ss_tab)
        mes = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É'
        await bot.send_message(msg.from_user.id, mes, reply_markup=kb_tab)
    else:
        mes = '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
        await bot.send_message(msg.from_user.id, mes)
        return


@dp.callback_query_handler(text='bv_tab')
@logger.catch
async def bv_tab(call: types.CallbackQuery):
    user = session.query(Admin).filter(Admin.admin_id == call.from_user.id, Admin.confirm == True).first()
    if not user:
        await bot.send_message(call.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        return
    list_column = ['–ù–æ–º–µ—Ä', '–§–ò–û', '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', '–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–¢–µ–ª–µ—Ñ–æ–Ω', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º']
    list_width = [6, 35, 15, 25, 25, 20, 15, 25]
    bd = Side(style='thin', color="000000")
    wb = Workbook()
    ws = wb.active
    for n, col in enumerate(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']):
        ws[f'{col}1'] = list_column[n]
        ws.column_dimensions[col].width = list_width[n]
    row = ws.row_dimensions[1]
    row.font = Font(bold=True, name='Calibri', size=10)
    row = ws.row_dimensions[1]
    row.border = Border(bottom=bd)
    n_row = 2
    for n_team, team in enumerate(session.query(BeachVolleyball).all()):
        p1 = session.query(Person).filter(Person.id == team.player_1).first()
        ws[f'A{n_row}'] = n_team + 1
        ws[f'B{n_row}'] = p1.full_name
        ws[f'C{n_row}'] = p1.birthday
        ws[f'D{n_row}'] = p1.company
        ws[f'E{n_row}'] = p1.position
        ws[f'F{n_row}'] = p1.phone
        ws[f'G{n_row}'] = team.date_reg.strftime("%d.%m.%Y")
        ws[f'H{n_row}'] = team.username_reg
        n_row += 1
        p2 = session.query(Person).filter(Person.id == team.player_2).first()
        ws[f'B{n_row}'] = p2.full_name
        ws[f'C{n_row}'] = p2.birthday
        ws[f'D{n_row}'] = p2.company
        ws[f'E{n_row}'] = p2.position
        ws[f'F{n_row}'] = p2.phone
        row = ws.row_dimensions[n_row]
        row.border = Border(bottom=bd)
        n_row += 1
    file_name = '–ü–ª—è–∂–Ω—ã–π –≤–æ–ª–µ–π–±–æ–ª.xlsx'
    wb.save(file_name)
    await bot.send_document(call.from_user.id, open(file_name, 'rb'))
    os.remove(file_name)



@dp.callback_query_handler(text='sb_tab')
@logger.catch
async def sb_tab(call: types.CallbackQuery):
    user = session.query(Admin).filter(Admin.admin_id == call.from_user.id, Admin.confirm == True).first()
    if not user:
        await bot.send_message(call.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        return
    list_column = ['–ù–æ–º–µ—Ä', '–§–ò–û', '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', '–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–¢–µ–ª–µ—Ñ–æ–Ω', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º']
    list_width = [6, 35, 15, 25, 25, 20, 15, 25]
    bd = Side(style='thin', color="000000")
    wb = Workbook()
    ws = wb.active
    for n, col in enumerate(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']):
        ws[f'{col}1'] = list_column[n]
        ws.column_dimensions[col].width = list_width[n]
    row = ws.row_dimensions[1]
    row.font = Font(bold=True, name='Calibri', size=10)
    row = ws.row_dimensions[1]
    row.border = Border(bottom=bd)
    n_row = 2
    for n_team, team in enumerate(session.query(Streetball).all()):
        p1 = session.query(Person).filter(Person.id == team.player_1).first()
        ws[f'A{n_row}'] = n_team + 1
        ws[f'B{n_row}'] = p1.full_name
        ws[f'C{n_row}'] = p1.birthday
        ws[f'D{n_row}'] = p1.company
        ws[f'E{n_row}'] = p1.position
        ws[f'F{n_row}'] = p1.phone
        ws[f'G{n_row}'] = team.date_reg.strftime("%d.%m.%Y")
        ws[f'H{n_row}'] = team.username_reg
        n_row += 1
        p2 = session.query(Person).filter(Person.id == team.player_2).first()
        ws[f'B{n_row}'] = p2.full_name
        ws[f'C{n_row}'] = p2.birthday
        ws[f'D{n_row}'] = p2.company
        ws[f'E{n_row}'] = p2.position
        ws[f'F{n_row}'] = p2.phone
        n_row += 1
        p3 = session.query(Person).filter(Person.id == team.player_3).first()
        ws[f'B{n_row}'] = p3.full_name
        ws[f'C{n_row}'] = p3.birthday
        ws[f'D{n_row}'] = p3.company
        ws[f'E{n_row}'] = p3.position
        ws[f'F{n_row}'] = p3.phone
        n_row += 1
        p4 = session.query(Person).filter(Person.id == team.player_4).first()
        ws[f'B{n_row}'] = p4.full_name
        ws[f'C{n_row}'] = p4.birthday
        ws[f'D{n_row}'] = p4.company
        ws[f'E{n_row}'] = p4.position
        ws[f'F{n_row}'] = p4.phone
        row = ws.row_dimensions[n_row]
        row.border = Border(bottom=bd)
        n_row += 1
    file_name = '–°—Ç—Ä–∏—Ç–±–æ–ª.xlsx'
    wb.save(file_name)
    await bot.send_document(call.from_user.id, open(file_name, 'rb'))
    os.remove(file_name)


@dp.callback_query_handler(text='ff_tab')
@logger.catch
async def ff_tab(call: types.CallbackQuery):
    user = session.query(Admin).filter(Admin.admin_id == call.from_user.id, Admin.confirm == True).first()
    if not user:
        await bot.send_message(call.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        return
    list_column = ['–ù–æ–º–µ—Ä', '–§–ò–û', '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', '–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–¢–µ–ª–µ—Ñ–æ–Ω', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º']
    list_width = [6, 35, 15, 25, 25, 20, 15, 25]
    bd = Side(style='thin', color="000000")
    wb = Workbook()
    ws = wb.active
    for n, col in enumerate(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']):
        ws[f'{col}1'] = list_column[n]
        ws.column_dimensions[col].width = list_width[n]
    row = ws.row_dimensions[1]
    row.font = Font(bold=True, name='Calibri', size=10)
    row = ws.row_dimensions[1]
    row.border = Border(bottom=bd)
    n_row = 2
    for n_team, team in enumerate(session.query(FigitalFootball).all()):
        p1 = session.query(Person).filter(Person.id == team.player_1).first()
        ws[f'A{n_row}'] = n_team + 1
        ws[f'B{n_row}'] = p1.full_name
        ws[f'C{n_row}'] = p1.birthday
        ws[f'D{n_row}'] = p1.company
        ws[f'E{n_row}'] = p1.position
        ws[f'F{n_row}'] = p1.phone
        ws[f'G{n_row}'] = team.date_reg.strftime("%d.%m.%Y")
        ws[f'H{n_row}'] = team.username_reg
        n_row += 1
        p2 = session.query(Person).filter(Person.id == team.player_2).first()
        ws[f'B{n_row}'] = p2.full_name
        ws[f'C{n_row}'] = p2.birthday
        ws[f'D{n_row}'] = p2.company
        ws[f'E{n_row}'] = p2.position
        ws[f'F{n_row}'] = p2.phone
        n_row += 1
        p3 = session.query(Person).filter(Person.id == team.player_3).first()
        ws[f'B{n_row}'] = p3.full_name
        ws[f'C{n_row}'] = p3.birthday
        ws[f'D{n_row}'] = p3.company
        ws[f'E{n_row}'] = p3.position
        ws[f'F{n_row}'] = p3.phone
        n_row += 1
        p4 = session.query(Person).filter(Person.id == team.player_4).first()
        ws[f'B{n_row}'] = p4.full_name
        ws[f'C{n_row}'] = p4.birthday
        ws[f'D{n_row}'] = p4.company
        ws[f'E{n_row}'] = p4.position
        ws[f'F{n_row}'] = p4.phone
        row = ws.row_dimensions[n_row]
        row.border = Border(bottom=bd)
        n_row += 1
    file_name = '–§–∏–¥–∂–∏—Ç–∞–ª_—Ñ—É—Ç–±–æ–ª.xlsx'
    wb.save(file_name)
    await bot.send_document(call.from_user.id, open(file_name, 'rb'))
    os.remove(file_name)


@dp.callback_query_handler(text='fcr_tab')
@logger.catch
async def fcr_tab(call: types.CallbackQuery):
    user = session.query(Admin).filter(Admin.admin_id == call.from_user.id, Admin.confirm == True).first()
    if not user:
        await bot.send_message(call.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        return
    list_column = ['–ù–æ–º–µ—Ä', '–§–ò–û', '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', '–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–¢–µ–ª–µ—Ñ–æ–Ω', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º']
    list_width = [6, 35, 15, 25, 25, 20, 15, 25]
    bd = Side(style='thin', color="000000")
    wb = Workbook()
    ws = wb.active
    for n, col in enumerate(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']):
        ws[f'{col}1'] = list_column[n]
        ws.column_dimensions[col].width = list_width[n]
    row = ws.row_dimensions[1]
    row.font = Font(bold=True, name='Calibri', size=10)
    row = ws.row_dimensions[1]
    row.border = Border(bottom=bd)
    n_row = 2
    for n_team, team in enumerate(session.query(FamilyCatamaranRacing).all()):
        p1 = session.query(Person).filter(Person.id == team.player_1).first()
        ws[f'A{n_row}'] = n_team + 1
        ws[f'B{n_row}'] = p1.full_name
        ws[f'C{n_row}'] = p1.birthday
        ws[f'D{n_row}'] = p1.company
        ws[f'E{n_row}'] = p1.position
        ws[f'F{n_row}'] = p1.phone
        ws[f'G{n_row}'] = team.date_reg.strftime("%d.%m.%Y")
        ws[f'H{n_row}'] = team.username_reg
        n_row += 1
        p2 = session.query(Person).filter(Person.id == team.player_2).first()
        ws[f'B{n_row}'] = p2.full_name
        ws[f'C{n_row}'] = p2.birthday
        ws[f'D{n_row}'] = p2.company
        ws[f'E{n_row}'] = p2.position
        ws[f'F{n_row}'] = p2.phone
        row = ws.row_dimensions[n_row]
        row.border = Border(bottom=bd)
        n_row += 1
    file_name = '–°–µ–º–µ–π–Ω—ã–µ_–≥–æ–Ω–∫–∏_–Ω–∞_–∫–∞—Ç–∞–º–∞—Ä–∞–Ω–∞—Ö.xlsx'
    wb.save(file_name)
    await bot.send_document(call.from_user.id, open(file_name, 'rb'))
    os.remove(file_name)


@dp.callback_query_handler(text='wo_tab')
@logger.catch
async def wo_tab(call: types.CallbackQuery):
    user = session.query(Admin).filter(Admin.admin_id == call.from_user.id, Admin.confirm == True).first()
    if not user:
        await bot.send_message(call.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        return
    list_column = ['–ù–æ–º–µ—Ä', '–§–ò–û', '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', '–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–¢–µ–ª–µ—Ñ–æ–Ω', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º']
    list_width = [6, 35, 15, 25, 25, 20, 15, 25]
    bd = Side(style='thin', color="000000")
    wb = Workbook()
    ws = wb.active
    for n, col in enumerate(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']):
        ws[f'{col}1'] = list_column[n]
        ws.column_dimensions[col].width = list_width[n]
    row = ws.row_dimensions[1]
    row.font = Font(bold=True, name='Calibri', size=10)
    row = ws.row_dimensions[1]
    row.border = Border(bottom=bd)
    n_row = 2
    for n_team, team in enumerate(session.query(Workout).all()):
        p1 = session.query(Person).filter(Person.id == team.player).first()
        ws[f'A{n_row}'] = n_team + 1
        ws[f'B{n_row}'] = p1.full_name
        ws[f'C{n_row}'] = p1.birthday
        ws[f'D{n_row}'] = p1.company
        ws[f'E{n_row}'] = p1.position
        ws[f'F{n_row}'] = p1.phone
        ws[f'G{n_row}'] = team.date_reg.strftime("%d.%m.%Y")
        ws[f'H{n_row}'] = team.username_reg
        row = ws.row_dimensions[n_row]
        row.border = Border(bottom=bd)
        n_row += 1
    file_name = '–í–æ—Ä–∫–∞—É—Ç.xlsx'
    wb.save(file_name)
    await bot.send_document(call.from_user.id, open(file_name, 'rb'))
    os.remove(file_name)


@dp.callback_query_handler(text='wb_tab')
@logger.catch
async def wb_tab(call: types.CallbackQuery):
    user = session.query(Admin).filter(Admin.admin_id == call.from_user.id, Admin.confirm == True).first()
    if not user:
        await bot.send_message(call.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        return
    list_column = ['–ù–æ–º–µ—Ä', '–§–ò–û', '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', '–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–¢–µ–ª–µ—Ñ–æ–Ω', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º']
    list_width = [6, 35, 15, 25, 25, 20, 15, 25]
    bd = Side(style='thin', color="000000")
    wb = Workbook()
    ws = wb.active
    for n, col in enumerate(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']):
        ws[f'{col}1'] = list_column[n]
        ws.column_dimensions[col].width = list_width[n]
    row = ws.row_dimensions[1]
    row.font = Font(bold=True, name='Calibri', size=10)
    row = ws.row_dimensions[1]
    row.border = Border(bottom=bd)
    n_row = 2
    for n_team, team in enumerate(session.query(Wakeboarding).all()):
        p1 = session.query(Person).filter(Person.id == team.player).first()
        ws[f'A{n_row}'] = n_team + 1
        ws[f'B{n_row}'] = p1.full_name
        ws[f'C{n_row}'] = p1.birthday
        ws[f'D{n_row}'] = p1.company
        ws[f'E{n_row}'] = p1.position
        ws[f'F{n_row}'] = p1.phone
        ws[f'G{n_row}'] = team.date_reg.strftime("%d.%m.%Y")
        ws[f'H{n_row}'] = team.username_reg
        row = ws.row_dimensions[n_row]
        row.border = Border(bottom=bd)
        n_row += 1
    file_name = '–í–µ–π–∫–±–æ—Ä–¥–∏–Ω–≥.xlsx'
    wb.save(file_name)
    await bot.send_document(call.from_user.id, open(file_name, 'rb'))
    os.remove(file_name)


@dp.callback_query_handler(text='rc_tab')
@logger.catch
async def rc_tab(call: types.CallbackQuery):
    user = session.query(Admin).filter(Admin.admin_id == call.from_user.id, Admin.confirm == True).first()
    if not user:
        await bot.send_message(call.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        return
    list_column = ['–ù–æ–º–µ—Ä', '–§–ò–û', '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', '–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–¢–µ–ª–µ—Ñ–æ–Ω', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º']
    list_width = [6, 35, 15, 25, 25, 20, 15, 25]
    bd = Side(style='thin', color="000000")
    wb = Workbook()
    ws = wb.active
    for n, col in enumerate(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']):
        ws[f'{col}1'] = list_column[n]
        ws.column_dimensions[col].width = list_width[n]
    row = ws.row_dimensions[1]
    row.font = Font(bold=True, name='Calibri', size=10)
    row = ws.row_dimensions[1]
    row.border = Border(bottom=bd)
    n_row = 2
    for n_team, team in enumerate(session.query(RockClimbing).all()):
        p1 = session.query(Person).filter(Person.id == team.player).first()
        ws[f'A{n_row}'] = n_team + 1
        ws[f'B{n_row}'] = p1.full_name
        ws[f'C{n_row}'] = p1.birthday
        ws[f'D{n_row}'] = p1.company
        ws[f'E{n_row}'] = p1.position
        ws[f'F{n_row}'] = p1.phone
        ws[f'G{n_row}'] = team.date_reg.strftime("%d.%m.%Y")
        ws[f'H{n_row}'] = team.username_reg
        row = ws.row_dimensions[n_row]
        row.border = Border(bottom=bd)
        n_row += 1
    file_name = '–°–∫–∞–ª–æ–ª–∞–∑–∞–Ω–∏–µ.xlsx'
    wb.save(file_name)
    await bot.send_document(call.from_user.id, open(file_name, 'rb'))
    os.remove(file_name)


@dp.callback_query_handler(text='chess_tab')
@logger.catch
async def chess_tab(call: types.CallbackQuery):
    user = session.query(Admin).filter(Admin.admin_id == call.from_user.id, Admin.confirm == True).first()
    if not user:
        await bot.send_message(call.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        return
    list_column = ['–ù–æ–º–µ—Ä', '–§–ò–û', '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', '–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–¢–µ–ª–µ—Ñ–æ–Ω', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º']
    list_width = [6, 35, 15, 25, 25, 20, 15, 25]
    bd = Side(style='thin', color="000000")
    wb = Workbook()
    ws = wb.active
    for n, col in enumerate(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']):
        ws[f'{col}1'] = list_column[n]
        ws.column_dimensions[col].width = list_width[n]
    row = ws.row_dimensions[1]
    row.font = Font(bold=True, name='Calibri', size=10)
    row = ws.row_dimensions[1]
    row.border = Border(bottom=bd)
    n_row = 2
    for n_team, team in enumerate(session.query(Chess).all()):
        p1 = session.query(Person).filter(Person.id == team.player).first()
        ws[f'A{n_row}'] = n_team + 1
        ws[f'B{n_row}'] = p1.full_name
        ws[f'C{n_row}'] = p1.birthday
        ws[f'D{n_row}'] = p1.company
        ws[f'E{n_row}'] = p1.position
        ws[f'F{n_row}'] = p1.phone
        ws[f'G{n_row}'] = team.date_reg.strftime("%d.%m.%Y")
        ws[f'H{n_row}'] = team.username_reg
        row = ws.row_dimensions[n_row]
        row.border = Border(bottom=bd)
        n_row += 1
    file_name = '–®–∞—Ö–º–∞—Ç—ã.xlsx'
    wb.save(file_name)
    await bot.send_document(call.from_user.id, open(file_name, 'rb'))
    os.remove(file_name)


@dp.callback_query_handler(text='ss_tab')
@logger.catch
async def ss_tab(call: types.CallbackQuery):
    user = session.query(Admin).filter(Admin.admin_id == call.from_user.id, Admin.confirm == True).first()
    if not user:
        await bot.send_message(call.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        return
    list_column = ['–ù–æ–º–µ—Ä', '–§–ò–û', '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', '–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–¢–µ–ª–µ—Ñ–æ–Ω', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º']
    list_width = [6, 35, 15, 25, 25, 20, 15, 25]
    bd = Side(style='thin', color="000000")
    wb = Workbook()
    ws = wb.active
    for n, col in enumerate(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']):
        ws[f'{col}1'] = list_column[n]
        ws.column_dimensions[col].width = list_width[n]
    row = ws.row_dimensions[1]
    row.font = Font(bold=True, name='Calibri', size=10)
    row = ws.row_dimensions[1]
    row.border = Border(bottom=bd)
    n_row = 2
    for n_team, team in enumerate(session.query(SupSurfing).all()):
        p1 = session.query(Person).filter(Person.id == team.player).first()
        ws[f'A{n_row}'] = n_team + 1
        ws[f'B{n_row}'] = p1.full_name
        ws[f'C{n_row}'] = p1.birthday
        ws[f'D{n_row}'] = p1.company
        ws[f'E{n_row}'] = p1.position
        ws[f'F{n_row}'] = p1.phone
        ws[f'G{n_row}'] = team.date_reg.strftime("%d.%m.%Y")
        ws[f'H{n_row}'] = team.username_reg
        row = ws.row_dimensions[n_row]
        row.border = Border(bottom=bd)
        n_row += 1
    file_name = 'SUP—Å–µ—Ä—Ñ–∏–Ω–≥.xlsx'
    wb.save(file_name)
    await bot.send_document(call.from_user.id, open(file_name, 'rb'))
    os.remove(file_name)


@dp.callback_query_handler(text='ccw_tab')
@logger.catch
async def ccw_tab(call: types.CallbackQuery):
    user = session.query(Admin).filter(Admin.admin_id == call.from_user.id, Admin.confirm == True).first()
    if not user:
        await bot.send_message(call.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        return
    list_column = ['–ù–æ–º–µ—Ä', '–§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è', '–§–ò–û —Ä–µ–±–µ–Ω–∫–∞', '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', '–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–¢–µ–ª–µ—Ñ–æ–Ω', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º']
    list_width = [6, 35, 35, 15, 25, 25, 20, 15, 25]
    bd = Side(style='thin', color="000000")
    wb = Workbook()
    ws = wb.active
    for n, col in enumerate(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']):
        ws[f'{col}1'] = list_column[n]
        ws.column_dimensions[col].width = list_width[n]
    row = ws.row_dimensions[1]
    row.font = Font(bold=True, name='Calibri', size=10)
    row = ws.row_dimensions[1]
    row.border = Border(bottom=bd)
    n_row = 2
    for n_team, team in enumerate(session.query(ChildrenClimbingWall).all()):
        p1 = session.query(Person).filter(Person.id == team.player).first()
        ws[f'A{n_row}'] = n_team + 1
        ws[f'B{n_row}'] = team.parent_name
        ws[f'C{n_row}'] = p1.full_name
        ws[f'D{n_row}'] = p1.birthday
        ws[f'E{n_row}'] = p1.company
        ws[f'F{n_row}'] = p1.position
        ws[f'G{n_row}'] = p1.phone
        ws[f'H{n_row}'] = team.date_reg.strftime("%d.%m.%Y")
        ws[f'I{n_row}'] = team.username_reg
        row = ws.row_dimensions[n_row]
        row.border = Border(bottom=bd)
        n_row += 1
    file_name = '–î–µ—Ç—Å–∫–∏–π_—Å–∫–∞–ª–æ–¥—Ä–æ–º.xlsx'
    wb.save(file_name)
    await bot.send_document(call.from_user.id, open(file_name, 'rb'))
    os.remove(file_name)

